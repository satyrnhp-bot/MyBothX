import telebot
from telebot import types
import requests
import json
from datetime import datetime, timedelta
import time
import pandas as pd
import numpy as np
import talib
import re
from bs4 import BeautifulSoup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = "8181930295:AAGSrTLXw1NOrmMI5jc2mHRvqCpM5vqxWNM"
BINANCE_API_URL = "https://api.binance.com/api/v3"
NEWSAPI_KEY = "139bdc2a63884f8896552dc48ed16f91"  # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ https://newsapi.org
CRYPTO_COMPARE_KEY = "94246ce346bbe6fb3db96c8176e76268a8642be5842ee76ba6b762253504c385"  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
price_alerts = {}  # {user_id: {symbol: {'threshold': 5.0, 'last_price': 10000}}}
alert_check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
last_alert_check = time.time()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_KEY, parse_mode='HTML')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
user_watchlist = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å–∏–º–≤–æ–ª–æ–≤
CRYPTO_SYMBOLS = {
    'BTC': 'BTCUSDT', 'BITCOIN': 'BTCUSDT',
    'ETH': 'ETHUSDT', 'ETHEREUM': 'ETHUSDT',
    'BNB': 'BNBUSDT',
    'ADA': 'ADAUSDT', 'CARDANO': 'ADAUSDT',
    'XRP': 'XRPUSDT', 'RIPPLE': 'XRPUSDT',
    'DOGE': 'DOGEUSDT', 'DOGECOIN': 'DOGEUSDT',
    'DOT': 'DOTUSDT', 'POLKADOT': 'DOTUSDT',
    'SOL': 'SOLUSDT', 'SOLANA': 'SOLUSDT',
    'LTC': 'LTCUSDT', 'LITECOIN': 'LTCUSDT',
    'LINK': 'LINKUSDT', 'CHAINLINK': 'LINKUSDT',
    'MATIC': 'MATICUSDT', 'POLYGON': 'MATICUSDT',
    'AVAX': 'AVAXUSDT', 'AVALANCHE': 'AVAXUSDT',
    'ATOM': 'ATOMUSDT', 'COSMOS': 'ATOMUSDT',
    'UNI': 'UNIUSDT', 'UNISWAP': 'UNIUSDT',
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
CRYPTO_KEYWORDS = [
    'bitcoin', 'ethereum', 'crypto', 'blockchain', 'defi', 'nft',
    'regulation', 'sec', 'sec', 'fed', 'interest rates', 'inflation',
    'elon musk', 'microsoft', 'google', 'amazon', 'apple', 'tesla',
    'china', 'india', 'eu', 'european union', 'ban', 'legal', 'law'
]


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API ---

def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        return float(value)
    except (ValueError, TypeError):
        return default


def safe_str(value, default=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É"""
    try:
        return str(value)
    except:
        return default


def normalize_symbol(symbol):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    symbol = symbol.upper().strip()

    if symbol.endswith('USDT') and len(symbol) > 4:
        return symbol

    if symbol in CRYPTO_SYMBOLS:
        return CRYPTO_SYMBOLS[symbol]

    if len(symbol) <= 4 and symbol.isalpha():
        return f"{symbol}USDT"

    return symbol


def setup_price_alert(user_id, symbol, threshold_percent):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        normalized_symbol = normalize_symbol(symbol)
        current_data = get_binance_price(normalized_symbol)

        if not current_data:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"

        if user_id not in price_alerts:
            price_alerts[user_id] = {}

        price_alerts[user_id][normalized_symbol] = {
            'threshold': float(threshold_percent),
            'last_price': current_data['price'],
            'last_check': time.time()
        }

        return True, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {normalized_symbol} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {threshold_percent}%"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"


def remove_price_alert(user_id, symbol):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        normalized_symbol = normalize_symbol(symbol)

        if user_id in price_alerts and normalized_symbol in price_alerts[user_id]:
            del price_alerts[user_id][normalized_symbol]
            return True, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {normalized_symbol} —É–¥–∞–ª–µ–Ω–æ"

        return False, f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {normalized_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"


def check_price_alerts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ"""
    try:
        current_time = time.time()
        alerts_to_send = []

        for user_id, symbols in list(price_alerts.items()):
            for symbol, alert_data in list(symbols.items()):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                if current_time - alert_data.get('last_check', 0) < 30:
                    continue

                current_data = get_binance_price(symbol)
                if not current_data:
                    continue

                current_price = current_data['price']
                last_price = alert_data['last_price']
                threshold = alert_data['threshold']

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                if last_price > 0:
                    price_change = ((current_price - last_price) / last_price) * 100

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
                    if abs(price_change) >= threshold:
                        alert_message = create_alert_message(symbol, current_price, price_change, threshold)
                        alerts_to_send.append((user_id, alert_message))

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        price_alerts[user_id][symbol]['last_price'] = current_price

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                price_alerts[user_id][symbol]['last_check'] = current_time

        return alerts_to_send

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return []


def create_alert_message(symbol, current_price, price_change, threshold):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    change_emoji = "üü¢" if price_change >= 0 else "üî¥"
    direction = "—Ä–æ—Å—Ç" if price_change >= 0 else "–ø–∞–¥–µ–Ω–∏–µ"

    message = f"üö® <b>–¶–ï–ù–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {symbol}</b>\n\n"
    message += f"{change_emoji} <b>–ü—Ä–æ–∏–∑–æ—à–ª–æ —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã!</b>\n\n"
    message += f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${current_price:,.4f}\n"
    message += f"üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {price_change:+.2f}%\n"
    message += f"üéØ <b>–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {threshold}%\n"
    message += f"üìä <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\n\n"
    message += f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S')}</i>"

    return message


def show_user_alerts(user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in price_alerts or not price_alerts[user_id]:
        return "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"

    message = "üîî <b>–í–ê–®–ò –ê–ö–¢–ò–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>\n\n"

    for symbol, alert_data in price_alerts[user_id].items():
        message += f"‚Ä¢ {symbol}: {alert_data['threshold']}% –∏–∑–º–µ–Ω–µ–Ω–∏–µ\n"

    message += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alertadd –∏ /alertremove –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
    return message


@bot.message_handler(commands=['alertadd'])
def alert_add_command(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        parts = message.text.split()
        if len(parts) != 3:
            bot.send_message(message.chat.id,
                             "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /alertadd BTC 5.0\n"
                             "–ì–¥–µ 5.0 - –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        symbol = parts[1]
        threshold = parts[2]

        success, result_msg = setup_price_alert(message.from_user.id, symbol, threshold)
        bot.send_message(message.chat.id, result_msg)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ alert_add_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


@bot.message_handler(commands=['alertremove'])
def alert_remove_command(message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        parts = message.text.split()
        if len(parts) != 2:
            bot.send_message(message.chat.id,
                             "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /alertremove BTC")
            return

        symbol = parts[1]
        success, result_msg = remove_price_alert(message.from_user.id, symbol)
        bot.send_message(message.chat.id, result_msg)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ alert_remove_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


@bot.message_handler(commands=['alerts'])
def alerts_list_command(message):
    """–°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        alerts_text = show_user_alerts(message.from_user.id)
        bot.send_message(message.chat.id, alerts_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ alerts_list_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π ---

def get_crypto_news(limit=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π —Å CryptoPanic"""
    try:
        url = "https://cryptopanic.com/api/v1/posts/"
        params = {
            'auth_token': 'YOUR_CRYPTOPANIC_TOKEN',  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            'public': 'true',
            'kind': 'news',
            'filter': 'rising',
            'currencies': 'BTC,ETH,USDT'
        }

        response = requests.get(url, params=params, timeout=10)
        data = response.json()

        news_items = []
        for item in data.get('results', [])[:limit]:
            news_items.append({
                'title': item.get('title', ''),
                'url': item.get('url', ''),
                'published_at': item.get('published_at', ''),
                'source': item.get('source', {}).get('title', ''),
                'votes': item.get('votes', {}).get('positive', 0)
            })

        return news_items

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ - –ø–∞—Ä—Å–∏–Ω–≥ CoinDesk
        return get_alternative_crypto_news(limit)


def get_alternative_crypto_news(limit=5):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–∞—Ä—Å–∏–Ω–≥ CoinDesk)"""
    try:
        url = "https://www.coindesk.com/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }

        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')

        news_items = []
        articles = soup.find_all('article', limit=limit)

        for article in articles:
            title_elem = article.find('h2') or article.find('h3') or article.find('h4')
            link_elem = article.find('a')

            if title_elem and link_elem:
                title = title_elem.get_text().strip()
                url = link_elem.get('href')
                if not url.startswith('http'):
                    url = 'https://www.coindesk.com' + url

                news_items.append({
                    'title': title,
                    'url': url,
                    'published_at': datetime.now().strftime('%Y-%m-%d'),
                    'source': 'CoinDesk',
                    'votes': 0
                })

        return news_items

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []


def get_political_news(limit=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å NewsAPI"""
    try:
        if not NEWSAPI_KEY or NEWSAPI_KEY == "–í–ê–®_NEWSAPI_–ö–õ–Æ–ß":
            return get_alternative_political_news(limit)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
        from_date = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')

        url = "https://newsapi.org/v2/everything"
        params = {
            'apiKey': NEWSAPI_KEY,
            'q': 'crypto cryptocurrency bitcoin ethereum regulation',
            'language': 'en',
            'sortBy': 'publishedAt',
            'from': from_date,
            'pageSize': limit
        }

        response = requests.get(url, params=params, timeout=10)
        data = response.json()

        news_items = []
        for article in data.get('articles', [])[:limit]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∫ –∫—Ä–∏–ø—Ç–æ –∏–ª–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é
            title = article.get('title', '').lower()
            description = article.get('description', '').lower()

            if any(keyword in title + description for keyword in CRYPTO_KEYWORDS):
                news_items.append({
                    'title': article.get('title', ''),
                    'url': article.get('url', ''),
                    'published_at': article.get('publishedAt', ''),
                    'source': article.get('source', {}).get('name', ''),
                    'description': article.get('description', '')
                })

        return news_items

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return get_alternative_political_news(limit)


def get_alternative_political_news(limit=5):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        # –ü–∞—Ä—Å–∏–º Reuters –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏
        url = "https://www.reuters.com/business/finance/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }

        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')

        news_items = []
        articles = soup.find_all('a', {'data-testid': 'Heading'}, limit=limit * 2)

        for article in articles:
            title = article.get_text().strip()
            url = article.get('href')
            if not url.startswith('http'):
                url = 'https://www.reuters.com' + url

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ relevant –Ω–æ–≤–æ—Å—Ç–∏
            if any(keyword in title.lower() for keyword in CRYPTO_KEYWORDS):
                news_items.append({
                    'title': title,
                    'url': url,
                    'published_at': datetime.now().strftime('%Y-%m-%d'),
                    'source': 'Reuters',
                    'description': ''
                })

            if len(news_items) >= limit:
                break

        return news_items

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []


def analyze_news_impact(news_items):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—ã–Ω–æ–∫"""
    impact_analysis = []

    for news in news_items:
        title = news['title'].lower()
        impact_level = "–ù–ï–ô–¢–†–ê–õ–¨–ù–û"
        affected_coins = []
        sentiment = "‚ö™"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–∏—è–Ω–∏—è
        if any(word in title for word in ['ban', 'illegal', 'crackdown', 'sue', 'sued']):
            impact_level = "–í–´–°–û–ö–ò–ô –ù–ï–ì–ê–¢–ò–í"
            sentiment = "üî¥"
        elif any(word in title for word in ['regulation', 'law', 'sec', 'fed', 'government']):
            impact_level = "–°–†–ï–î–ù–ò–ô –ù–ï–ì–ê–¢–ò–í"
            sentiment = "üü†"
        elif any(word in title for word in ['approve', 'legal', 'adopt', 'partnership', 'investment']):
            impact_level = "–°–†–ï–î–ù–ò–ô –ü–û–ó–ò–¢–ò–í"
            sentiment = "üü¢"
        elif any(word in title for word in ['bitcoin', 'btc']):
            affected_coins.append("BTC")
        elif any(word in title for word in ['ethereum', 'eth']):
            affected_coins.append("ETH")
        elif any(word in title for word in ['xrp', 'ripple']):
            affected_coins.append("XRP")
        elif any(word in title for word in ['cardano', 'ada']):
            affected_coins.append("ADA")
        elif any(word in title for word in ['solana', 'sol']):
            affected_coins.append("SOL")

        # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É
        if not affected_coins:
            affected_coins = ["–í–°–ï –†–´–ù–ö–ò"]

        impact_analysis.append({
            'title': news['title'],
            'url': news['url'],
            'source': news['source'],
            'impact': impact_level,
            'sentiment': sentiment,
            'affected': affected_coins,
            'time': news.get('published_at', '')
        })

    return impact_analysis


def format_news_message(news_analysis):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
    if not news_analysis:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    message = "<b>üì∞ –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò –î–õ–Ø –¢–†–ï–ô–î–ï–†–û–í</b>\n\n"

    for i, news in enumerate(news_analysis[:5], 1):
        message += f"{news['sentiment']} <b>{i}. {news['title']}</b>\n"
        message += f"   üìä <b>–í–ª–∏—è–Ω–∏–µ:</b> {news['impact']}\n"
        message += f"   üìç <b>–ó–∞—Ç—Ä–æ–Ω–µ—Ç:</b> {', '.join(news['affected'])}\n"
        message += f"   üè¢ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {news['source']}\n"
        message += f"   üîó <a href='{news['url']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n\n"

    message += "<i>üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.</i>"
    message += "\n<i>‚ö†Ô∏è –≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.</i>"

    return message


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

def get_historical_data(symbol, interval='1d', limit=100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        normalized_symbol = normalize_symbol(symbol)
        url = f"{BINANCE_API_URL}/klines"
        params = {
            'symbol': normalized_symbol,
            'interval': interval,
            'limit': limit
        }

        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_asset_volume', 'number_of_trades',
            'taker_buy_base_volume', 'taker_buy_quote_volume', 'ignore'
        ])

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
        numeric_columns = ['open', 'high', 'low', 'close', 'volume']
        for col in numeric_columns:
            df[col] = pd.to_numeric(df[col])

        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

        return df

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def get_binance_price(symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å Binance"""
    try:
        normalized_symbol = normalize_symbol(symbol)
        url = f"{BINANCE_API_URL}/ticker/24hr"
        params = {'symbol': normalized_symbol}

        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()

        return {
            'symbol': normalized_symbol,
            'price': safe_float(data.get('lastPrice')),
            'change': safe_float(data.get('priceChange')),
            'change_percent': safe_float(data.get('priceChangePercent')),
            'high': safe_float(data.get('highPrice')),
            'low': safe_float(data.get('lowPrice')),
            'open': safe_float(data.get('openPrice')),
            'volume': safe_float(data.get('volume')),
            'quote_volume': safe_float(data.get('quoteVolume')),
            'timestamp': datetime.now().strftime('%H:%M:%S')
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Binance API: {e}")
        return None


def calculate_technical_indicators(df):
    """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        close_prices = df['close'].values
        high_prices = df['high'].values
        low_prices = df['low'].values

        indicators = {}

        # 1. Moving Averages (–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ)
        indicators['MA_20'] = talib.SMA(close_prices, timeperiod=20)[-1]
        indicators['MA_50'] = talib.SMA(close_prices, timeperiod=50)[-1]
        indicators['MA_100'] = talib.SMA(close_prices, timeperiod=100)[-1]

        current_price = close_prices[-1]
        indicators['MA_Signal'] = get_ma_signal(current_price, indicators)

        # 2. RSI (Relative Strength Index)
        indicators['RSI'] = talib.RSI(close_prices, timeperiod=14)[-1]
        indicators['RSI_Signal'] = get_rsi_signal(indicators['RSI'])

        # 3. MACD (Moving Average Convergence Divergence)
        macd, macd_signal, macd_hist = talib.MACD(close_prices,
                                                  fastperiod=12,
                                                  slowperiod=26,
                                                  signalperiod=9)
        indicators['MACD'] = macd[-1]
        indicators['MACD_Signal'] = macd_signal[-1]
        indicators['MACD_Hist'] = macd_hist[-1]
        indicators['MACD_Signal_Type'] = get_macd_signal(macd, macd_signal)

        # 4. Bollinger Bands (–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)
        upper_band, middle_band, lower_band = talib.BBANDS(close_prices,
                                                           timeperiod=20,
                                                           nbdevup=2,
                                                           nbdevdn=2)
        indicators['BB_Upper'] = upper_band[-1]
        indicators['BB_Middle'] = middle_band[-1]
        indicators['BB_Lower'] = lower_band[-1]
        indicators['BB_Position'] = get_bb_position(current_price,
                                                    upper_band[-1],
                                                    lower_band[-1])

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators['Volume_MA'] = talib.SMA(df['volume'].values, timeperiod=20)[-1]
        indicators['Current_Volume'] = df['volume'].values[-1]
        indicators['Volume_Ratio'] = indicators['Current_Volume'] / indicators['Volume_MA'] if indicators[
                                                                                                   'Volume_MA'] > 0 else 1

        return indicators

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return None


def get_ma_signal(current_price, indicators):
    """–°–∏–≥–Ω–∞–ª –ø–æ —Å–∫–æ–ª—å–∑—è—â–∏–º —Å—Ä–µ–¥–Ω–∏–º"""
    ma_20 = indicators['MA_20']
    ma_50 = indicators['MA_50']
    ma_100 = indicators['MA_100']

    if current_price > ma_20 > ma_50 > ma_100:
        return "üü¢ –°–ò–õ–¨–ù–´–ô –ë–´–ß–ò–ô (–≤—Å–µ MA –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º –ø–æ—Ä—è–¥–∫–µ)"
    elif current_price < ma_20 < ma_50 < ma_100:
        return "üî¥ –°–ò–õ–¨–ù–´–ô –ú–ï–î–í–ï–ñ–ò–ô (–≤—Å–µ MA –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º –ø–æ—Ä—è–¥–∫–µ)"
    elif current_price > ma_20 and ma_20 > ma_50:
        return "üü¢ –ë–´–ß–ò–ô (—Ü–µ–Ω–∞ –≤—ã—à–µ MA20, MA20 > MA50)"
    elif current_price < ma_20 and ma_20 < ma_50:
        return "üî¥ –ú–ï–î–í–ï–ñ–ò–ô (—Ü–µ–Ω–∞ –Ω–∏–∂–µ MA20, MA20 < MA50)"
    else:
        return "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô (—Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã)"


def get_rsi_signal(rsi):
    """–°–∏–≥–Ω–∞–ª –ø–æ RSI"""
    if rsi > 70:
        return "üî¥ –ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨ (RSI > 70)"
    elif rsi > 60:
        return "üü° –í–ï–†–•–ù–Ø–Ø –ó–û–ù–ê (RSI 60-70)"
    elif rsi < 30:
        return "üü¢ –ü–ï–†–ï–ü–†–û–î–ê–ù–ù–û–°–¢–¨ (RSI < 30)"
    elif rsi < 40:
        return "üü° –ù–ò–ñ–ù–Ø–Ø –ó–û–ù–ê (RSI 30-40)"
    else:
        return "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–û (RSI 40-60)"


def get_macd_signal(macd, macd_signal):
    """–°–∏–≥–Ω–∞–ª –ø–æ MACD"""
    current_macd = macd[-1]
    current_signal = macd_signal[-1]
    previous_macd = macd[-2]
    previous_signal = macd_signal[-2]

    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
    if current_macd > current_signal and previous_macd <= previous_signal:
        return "üü¢ –ë–´–ß–ò–ô –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï (MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª–∞)"
    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
    elif current_macd < current_signal and previous_macd >= previous_signal:
        return "üî¥ –ú–ï–î–í–ï–ñ–ò–ô –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï (MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª–∞)"
    # MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
    elif current_macd > current_signal:
        return "üü¢ –ë–´–ß–ò–ô (MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª–∞)"
    # MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
    elif current_macd < current_signal:
        return "üî¥ –ú–ï–î–í–ï–ñ–ò–ô (MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª–∞)"
    else:
        return "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô"


def get_bb_position(price, upper_band, lower_band):
    """–ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"""
    band_width = upper_band - lower_band
    if band_width == 0:
        return "‚ö™ –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û"

    position = (price - lower_band) / band_width

    if position > 0.8:
        return "üî¥ –í–ï–†–•–ù–Ø–Ø –ü–û–õ–û–°–ê (>80%)"
    elif position > 0.6:
        return "üü° –í–ï–†–•–ù–Ø–Ø –ó–û–ù–ê (60-80%)"
    elif position < 0.2:
        return "üü¢ –ù–ò–ñ–ù–Ø–Ø –ü–û–õ–û–°–ê (<20%)"
    elif position < 0.4:
        return "üü° –ù–ò–ñ–ù–Ø–Ø –ó–û–ù–ê (20-40%)"
    else:
        return "‚ö™ –°–†–ï–î–ù–Ø–Ø –ó–û–ù–ê (40-60%)"


def generate_technical_analysis(symbol, df, indicators, current_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        current_price = current_data['price']
        change_percent = current_data['change_percent']

        analysis = f"""<b>üìä {symbol} - –ü–û–õ–ù–´–ô –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó</b>

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${current_price:,.4f}
üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {change_percent:+.2f}%

<b>üéØ –°–ò–ì–ù–ê–õ–´ –ò–ù–î–ò–ö–ê–¢–û–†–û–í:</b>

<b>1. üìä –°–ö–û–õ–¨–ó–Ø–©–ò–ï –°–†–ï–î–ù–ò–ï (MA):</b>
‚Ä¢ MA(20): ${indicators['MA_20']:,.4f}
‚Ä¢ MA(50): ${indicators['MA_50']:,.4f} 
‚Ä¢ MA(100): ${indicators['MA_100']:,.4f}
‚Ä¢ –°–∏–≥–Ω–∞–ª: {indicators['MA_Signal']}

<b>2. üìà RSI (–ò–Ω–¥–µ–∫—Å –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –°–∏–ª—ã):</b>
‚Ä¢ RSI(14): {indicators['RSI']:.2f}
‚Ä¢ –°–∏–≥–Ω–∞–ª: {indicators['RSI_Signal']}

<b>3. üîÑ MACD (–°—Ö–æ–∂–¥–µ–Ω–∏–µ/–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –°–∫–æ–ª—å–∑—è—â–∏—Ö –°—Ä–µ–¥–Ω–∏—Ö):</b>
‚Ä¢ MACD: {indicators['MACD']:.4f}
‚Ä¢ Signal: {indicators['MACD_Signal']:.4f}
‚Ä¢ Histogram: {indicators['MACD_Hist']:.4f}
‚Ä¢ –°–∏–≥–Ω–∞–ª: {indicators['MACD_Signal_Type']}

<b>4. üìâ –ü–û–õ–û–°–´ –ë–û–õ–õ–ò–ù–î–ñ–ï–†–ê (BB):</b>
‚Ä¢ –í–µ—Ä—Ö–Ω—è—è: ${indicators['BB_Upper']:,.4f}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è: ${indicators['BB_Middle']:,.4f}
‚Ä¢ –ù–∏–∂–Ω—è—è: ${indicators['BB_Lower']:,.4f}
‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: {indicators['BB_Position']}

<b>5. üíπ –û–ë–™–ï–ú –¢–û–†–ì–û–í:</b>
‚Ä¢ –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: {indicators['Current_Volume']:,.0f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º (20): {indicators['Volume_MA']:,.0f}
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {indicators['Volume_Ratio']:.2f}x

<b>üìä –û–ë–©–ò–ô –°–ò–ì–ù–ê–õ:</b>
{generate_overall_signal(indicators)}

‚è∞ <i>–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</i>
<i>üìà –ò—Å—Ç–æ—á–Ω–∏–∫: Binance API | üïê –¢–∞–π–º—Ñ—Ä–µ–π–º: 1 –¥–µ–Ω—å</i>
"""
        return analysis

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None


def generate_overall_signal(indicators):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    bullish_signals = 0
    bearish_signals = 0

    # –ê–Ω–∞–ª–∏–∑ MA —Å–∏–≥–Ω–∞–ª–∞
    ma_signal = indicators['MA_Signal']
    if "–ë–´–ß–ò–ô" in ma_signal:
        bullish_signals += 2 if "–°–ò–õ–¨–ù–´–ô" in ma_signal else 1
    elif "–ú–ï–î–í–ï–ñ–ò–ô" in ma_signal:
        bearish_signals += 2 if "–°–ò–õ–¨–ù–´–ô" in ma_signal else 1

    # –ê–Ω–∞–ª–∏–∑ RSI —Å–∏–≥–Ω–∞–ª–∞
    rsi_signal = indicators['RSI_Signal']
    if "–ü–ï–†–ï–ü–†–û–î–ê–ù–ù–û–°–¢–¨" in rsi_signal:
        bullish_signals += 2
    elif "–ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨" in rsi_signal:
        bearish_signals += 2
    elif "–ù–ò–ñ–ù–Ø–Ø –ó–û–ù–ê" in rsi_signal:
        bullish_signals += 1

    # –ê–Ω–∞–ª–∏–∑ MACD —Å–∏–≥–Ω–∞–ª–∞
    macd_signal = indicators['MACD_Signal_Type']
    if "–ë–´–ß–ò–ô" in macd_signal:
        bullish_signals += 2 if "–ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï" in macd_signal else 1
    elif "–ú–ï–î–í–ï–ñ–ò–ô" in macd_signal:
        bearish_signals += 2 if "–ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï" in macd_signal else 1

    # –ê–Ω–∞–ª–∏–∑ Bollinger Bands
    bb_signal = indicators['BB_Position']
    if "–ù–ò–ñ–ù–Ø–Ø –ü–û–õ–û–°–ê" in bb_signal:
        bullish_signals += 2
    elif "–ù–ò–ñ–ù–Ø–Ø –ó–û–ù–ê" in bb_signal:
        bullish_signals += 1
    elif "–í–ï–†–•–ù–Ø–Ø –ü–û–õ–û–°–ê" in bb_signal:
        bearish_signals += 2

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    if bullish_signals - bearish_signals >= 3:
        return "üü¢ –°–ò–õ–¨–ù–´–ô –ë–´–ß–ò–ô –°–ò–ì–ù–ê–õ (–ø–æ–∫—É–ø–∫–∞)"
    elif bullish_signals - bearish_signals >= 1:
        return "üü¢ –ë–´–ß–ò–ô –°–ò–ì–ù–ê–õ (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏)"
    elif bearish_signals - bullish_signals >= 3:
        return "üî¥ –°–ò–õ–¨–ù–´–ô –ú–ï–î–í–ï–ñ–ò–ô –°–ò–ì–ù–ê–õ (–ø—Ä–æ–¥–∞–∂–∞)"
    elif bearish_signals - bullish_signals >= 1:
        return "üî¥ –ú–ï–î–í–ï–ñ–ò–ô –°–ò–ì–ù–ê–õ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å)"
    else:
        return "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ (–æ–∂–∏–¥–∞–Ω–∏–µ)"


def format_price_message(data, indicators=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–æ–π"""
    if not data:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

    symbol = safe_str(data.get('symbol', 'UNKNOWN'))
    price = safe_float(data.get('price', 0))
    change = safe_float(data.get('change', 0))
    change_percent = safe_float(data.get('change_percent', 0))

    message = f"<b>üìä {symbol} - –¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê</b>\n\n"
    message += f"üí∞ <b>–¶–µ–Ω–∞:</b> ${price:,.4f}\n"

    change_emoji = "üü¢" if change >= 0 else "üî¥"
    message += f"üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {change_emoji} ${abs(change):,.4f} ({change_percent:+.2f}%)\n\n"

    if indicators:
        message += f"<b>üìä –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:</b>\n"
        message += f"‚Ä¢ RSI: {indicators.get('RSI', 0):.1f} - {indicators.get('RSI_Signal', '')}\n"
        message += f"‚Ä¢ MACD: {indicators.get('MACD', 0):.4f}\n"
        message += f"‚Ä¢ –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞: {indicators.get('BB_Position', '')}\n"

        overall_signal = generate_overall_signal(indicators)
        message += f"\n<b>üéØ –û–ë–©–ò–ô –°–ò–ì–ù–ê–õ:</b> {overall_signal}"

    message += f"\n\n‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data.get('timestamp', '')}</i>"
    message += f"\n<i>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analysis</i>"

    return message


def get_chart_image(symbol):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫"""
    normalized_symbol = normalize_symbol(symbol)
    return f"https://www.tradingview.com/chart/?symbol=BINANCE:{normalized_symbol}"


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = """
<b>üöÄ –ö–†–ò–ü–¢–û –ê–ù–ê–õ–ò–¢–ò–ö - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó</b>

<u>üìä –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:</u>
/price - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ + –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
/analysis - –ü–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (MA, RSI, MACD, BB)
/news - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
/chart - –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ TradingView
/watch - –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
/list - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ

<u>üîî –ö–û–ú–ê–ù–î–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:</u>
/alertadd SYMBOL % - –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /alertadd BTC 5.0)
/alertremove SYMBOL - –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
/alerts - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

<u>üìä –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:</u>
/price SYMBOL - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
/analysis SYMBOL - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
/news - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏

<u>üìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:</u>
‚Ä¢ üìä Moving Averages (MA 20/50/100)
‚Ä¢ üìà RSI - –ò–Ω–¥–µ–∫—Å –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –°–∏–ª—ã
‚Ä¢ üîÑ MACD - –°—Ö–æ–∂–¥–µ–Ω–∏–µ/–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –°—Ä–µ–¥–Ω–∏—Ö
‚Ä¢ üìâ Bollinger Bands - –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
‚Ä¢ üíπ –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤

<u>üì∞ –°–ò–°–¢–ï–ú–ê –ù–û–í–û–°–¢–ï–ô:</u>
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä—ã–Ω–æ–∫
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤

<u>üí° –ü–†–ò–ú–ï–†–´:</u>
/price BTC - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ Bitcoin
/analysis ETH - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Ethereum
/news - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
/chart SOL - –≥—Ä–∞—Ñ–∏–∫ Solana
/alertadd BTC 3.5 - –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Bitcoin –Ω–∞ 3.5%
/alertadd ETH 5.0 - –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Ethereum –Ω–∞ 5%
"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üìä –¶–µ–Ω–∞')
    btn2 = types.KeyboardButton('üìà –ê–Ω–∞–ª–∏–∑')
    btn3 = types.KeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏')
    btn4 = types.KeyboardButton('üìâ –ì—Ä–∞—Ñ–∏–∫')
    btn5 = types.KeyboardButton('‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')

    markup.add(btn1, btn2, btn3, btn4, btn5)

    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(commands=['price'])
def price_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        parts = message.text.split()
        if len(parts) > 1:
            symbol = ' '.join(parts[1:])
            check_crypto_price(message, symbol)
        else:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª: /price BTC")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ price_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")


@bot.message_handler(commands=['analysis'])
def analysis_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        parts = message.text.split()
        if len(parts) > 1:
            symbol = ' '.join(parts[1:])
            perform_technical_analysis(message, symbol)
        else:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª: /analysis BTC")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ analysis_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")


@bot.message_handler(commands=['news'])
def news_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        show_news(message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ news_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")


@bot.message_handler(commands=['chart'])
def chart_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        parts = message.text.split()
        if len(parts) > 1:
            symbol = ' '.join(parts[1:])
            show_chart(message, symbol)
        else:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª: /chart BTC")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ chart_command: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['watch'])
def watch_command(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        parts = message.text.split()
        if len(parts) > 1:
            symbol = ' '.join(parts[1:])
            add_to_watchlist(message, symbol)
        else:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª: /watch BTC")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ watch_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")


@bot.message_handler(commands=['list'])
def list_command(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    show_watchlist(message)


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@bot.message_handler(func=lambda message: message.text in ['üìä –¶–µ–Ω–∞', '—Ü–µ–Ω–∞', '–¶–µ–Ω–∞'])
def handle_price_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¶–µ–Ω–∞"""
    msg = bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è —Ü–µ–Ω—ã (BTC, ETH):")
    bot.register_next_step_handler(msg, process_price_input)


@bot.message_handler(func=lambda message: message.text in ['üìà –ê–Ω–∞–ª–∏–∑', '–∞–Ω–∞–ª–∏–∑', '–ê–Ω–∞–ª–∏–∑'])
def handle_analysis_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏–∑"""
    msg = bot.send_message(message.chat.id, "üìä –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (BTC, ETH):")
    bot.register_next_step_handler(msg, process_analysis_input)


@bot.message_handler(func=lambda message: message.text in ['üì∞ –ù–æ–≤–æ—Å—Ç–∏', '–Ω–æ–≤–æ—Å—Ç–∏', '–ù–æ–≤–æ—Å—Ç–∏'])
def handle_news_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤–æ—Å—Ç–∏"""
    show_news(message)


@bot.message_handler(func=lambda message: message.text in ['üìâ –ì—Ä–∞—Ñ–∏–∫', '–≥—Ä–∞—Ñ–∏–∫', '–ì—Ä–∞—Ñ–∏–∫'])
def handle_chart_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì—Ä–∞—Ñ–∏–∫"""
    msg = bot.send_message(message.chat.id, "üìà –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (BTC):")
    bot.register_next_step_handler(msg, process_chart_input)


@bot.message_handler(func=lambda message: message.text in ['‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ'])
def handle_watchlist_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    show_watchlist(message)


def process_price_input(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Ü–µ–Ω—ã"""
    try:
        symbol = message.text.strip()
        if symbol:
            check_crypto_price(message, symbol)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_price_input: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


def process_analysis_input(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        symbol = message.text.strip()
        if symbol:
            perform_technical_analysis(message, symbol)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_analysis_input: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


def process_chart_input(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        symbol = message.text.strip()
        if symbol:
            show_chart(message, symbol)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_chart_input: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


def show_news(message):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        bot.send_chat_action(message.chat.id, 'typing')

        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–∏
        crypto_news = get_crypto_news(limit=3)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        political_news = get_political_news(limit=3)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ
        all_news = crypto_news + political_news
        news_analysis = analyze_news_impact(all_news)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        news_message = format_news_message(news_analysis)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="refresh_news"))

        bot.send_message(message.chat.id, news_message, reply_markup=markup, disable_web_page_preview=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_news: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def check_crypto_price(message, symbol):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        bot.send_chat_action(message.chat.id, 'typing')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_data = get_binance_price(symbol)
        if not current_data:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{symbol}'")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df = get_historical_data(symbol, interval='1d', limit=100)
        if df is None or len(df) < 50:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ '{symbol}'")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = calculate_technical_indicators(df)
        if not indicators:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è '{symbol}'")
            return

        response = format_price_message(current_data, indicators)

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"analysis_{symbol}"),
            types.InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{symbol}"),
            types.InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"watch_{symbol}"),
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{symbol}")
        )

        bot.send_message(message.chat.id, response, reply_markup=markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_crypto_price: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")


def perform_technical_analysis(message, symbol):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        bot.send_chat_action(message.chat.id, 'typing')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_data = get_binance_price(symbol)
        if not current_data:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{symbol}'")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        df = get_historical_data(symbol, interval='1d', limit=100)
        if df is None or len(df) < 50:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ '{symbol}'")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = calculate_technical_indicators(df)
        if not indicators:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è '{symbol}'")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = generate_technical_analysis(symbol, df, indicators, current_data)
        if not analysis:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è '{symbol}'")
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", callback_data=f"price_{symbol}"),
            types.InlineKeyboardButton("üìâ –ì—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{symbol}")
        )

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(analysis) > 4000:
            parts = [analysis[i:i + 4000] for i in range(0, len(analysis), 4000)]
            for part in parts:
                bot.send_message(message.chat.id, part, parse_mode='HTML')
            bot.send_message(message.chat.id, "üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, analysis, reply_markup=markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ perform_technical_analysis: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}")


def show_chart(message, symbol):
    """–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        chart_url = get_chart_image(symbol)
        normalized_symbol = normalize_symbol(symbol)

        response = f"<b>üìà –ì–†–ê–§–ò–ö {normalized_symbol}</b>\n\n"
        response += f"üîó <a href='{chart_url}'>–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ TradingView</a>\n\n"
        response += f"<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏</i>"

        bot.send_message(message.chat.id, response, disable_web_page_preview=False)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_chart: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ---

def add_to_watchlist(message, symbol):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        user_id = message.from_user.id
        normalized_symbol = normalize_symbol(symbol)

        if user_id not in user_watchlist:
            user_watchlist[user_id] = []

        if normalized_symbol in user_watchlist[user_id]:
            bot.send_message(message.chat.id, f"‚úÖ {normalized_symbol} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        else:
            user_watchlist[user_id].append(normalized_symbol)
            bot.send_message(message.chat.id, f"‚úÖ {normalized_symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ add_to_watchlist: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")


def show_watchlist(message):
    """–ü–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        user_id = message.from_user.id
        if user_id not in user_watchlist or not user_watchlist[user_id]:
            bot.send_message(message.chat.id, "üì≠ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ —Å–∏–º–≤–æ–ª—ã: /watch BTC")
            return

        bot.send_message(message.chat.id, "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã...")

        markup = types.InlineKeyboardMarkup()
        for symbol in user_watchlist[user_id]:
            data = get_binance_price(symbol)
            if data:
                price = safe_float(data.get('price', 0))
                change_percent = safe_float(data.get('change_percent', 0))
                change_emoji = "üü¢" if change_percent >= 0 else "üî¥"

                markup.add(types.InlineKeyboardButton(
                    f"{symbol} - ${price:,.2f} {change_emoji}{change_percent:+.1f}%",
                    callback_data=f"price_{symbol}"
                ))

        markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º", callback_data="manage_watchlist"))

        bot.send_message(message.chat.id, "üìä <b>–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:</b>", reply_markup=markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_watchlist: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ ---

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
    try:
        if call.data.startswith('price_'):
            symbol = call.data.split('_', 1)[1]
            check_crypto_price(call.message, symbol)

        elif call.data.startswith('analysis_'):
            symbol = call.data.split('_', 1)[1]
            perform_technical_analysis(call.message, symbol)

        elif call.data.startswith('chart_'):
            symbol = call.data.split('_', 1)[1]
            show_chart(call.message, symbol)

        elif call.data.startswith('watch_'):
            symbol = call.data.split('_', 1)[1]
            user_id = call.from_user.id

            if user_id not in user_watchlist:
                user_watchlist[user_id] = []

            if symbol in user_watchlist[user_id]:
                bot.answer_callback_query(call.id, f"‚úÖ {symbol} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            else:
                user_watchlist[user_id].append(symbol)
                bot.answer_callback_query(call.id, f"‚úÖ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

        elif call.data.startswith('refresh_'):
            if call.data == 'refresh_news':
                bot.answer_callback_query(call.id, "‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è")
                show_news(call.message)
            else:
                symbol = call.data.split('_', 1)[1]
                bot.answer_callback_query(call.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                check_crypto_price(call.message, symbol)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

if __name__ == '__main__':
    print("ü§ñ –ö–†–ò–ü–¢–û –ê–ù–ê–õ–ò–¢–ò–ö –∑–∞–ø—É—â–µ–Ω...")
    print("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    print("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread


    def polling_thread():
        while True:
            try:
                bot.infinity_polling(timeout=60, long_polling_timeout=30)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)


    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = Thread(target=polling_thread, daemon=True)
    bot_thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    while True:
        try:
            current_time = time.time()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ alert_check_interval —Å–µ–∫—É–Ω–¥
            if current_time - last_alert_check >= alert_check_interval:
                alerts = check_price_alerts()

                for user_id, alert_message in alerts:
                    try:
                        bot.send_message(user_id, alert_message)
                        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

                last_alert_check = current_time

            time.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(30)